
[{"content":"\r一些命令 #\r对于一些常用的命令 总结一下\n包括但不限于docker，git\ndocker\ndocker \u0026ndash;version #查看docker版本 docker help # 列出所有可用命令 docker images #列出本地存储镜像 docker pull #从docker hub拉取镜像 docker run -d -p #创建并运行一个新容器 docker ps #显示所有容器 包括已经停止的 docker-compose down #停止并删除容器 git\ngit init #初始化本地git仓库 git status #查看仓库的状态 git add . #将所有文件添加到暂存区 git commit -m\u0026quot;xxx\u0026quot; #将本地文件提交到工作区 git push origin main #将工作区的文件推送到远程仓库 git push报错时 尝试下面的解决办法\n移除 Git 的全局 HTTP 和 HTTPS 代理配置，让 Git 直接尝试连接远程服务器\ngit config --global --unset http.proxy\rgit config --global --unset https.proxy 有时候取消代理设置仍然会出现报错，这时可以通过设置系统代理来解决。具体步骤如下：\n在代理服务器中，将端口设置为7890，在终端输入以下命令，设置 Git 使用本地代理\ngit config --global http.proxy http://127.0.0.1:7890 设置完成后，可以通过以下命令检验是否设置成功：\ngit config --global -l 再次尝试git push命令，同步远程仓库\n","date":"October 6, 2025","externalUrl":null,"permalink":"/posts/%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4/","section":"博客","summary":"","title":"一些命令","type":"posts"},{"content":"\rGit 的核心概念 #\r在使用 Git 之前，理解几个核心概念能让你更好地理解它的工作方式：\n仓库 (Repository / Repo)：你的项目文件及其所有历史记录的集合。可以存在于本地（本地仓库）或远程服务器（远程仓库，如 GitHub）。 工作区 (Working Directory)：你当前正在进行修改的文件。 暂存区 (Staging Area / Index)：一个介于工作区和本地仓库之间的区域。你将要提交的修改会先放到这里。 提交 (Commit)：将暂存区的修改永久保存到本地仓库。每次提交都代表项目历史的一个快照。 分支 (Branch)：独立的代码开发线。你可以在不影响主线代码的情况下进行新功能开发或 bug 修复。 主分支 (Main / Master Branch)：项目的主开发分支，通常包含稳定的、可发布的代码。 远程 (Remote)：通常指远程仓库，例如 GitHub 上的仓库。 HEAD：指向当前所在分支的最新提交。 Git 的基本工作流程 #\r一个典型的 Git 工作流程如下：\n初始化仓库或克隆远程仓库：开始一个新项目或从现有项目入手。 修改文件：在工作区对文件进行增、删、改。 暂存修改：将你想要提交的修改添加到暂存区。 提交修改：将暂存区的修改保存到本地仓库，并附带一条描述信息。 推送到远程仓库（可选）：将本地的提交同步到远程仓库，与团队成员共享。 拉取远程更新（可选）：从远程仓库获取最新的修改并合并到本地。 Git 常用命令详解 #\r下面是一些最常用的 Git 命令及其用途：\n1. 设置 Git 用户信息 #\r首次使用 Git 时，你需要配置你的用户名和邮箱，这些信息会记录在你的提交中。\ngit config --global user.name \u0026#34;你的名字\u0026#34; git config --global user.email \u0026#34;你的邮箱@example.com\u0026#34; 2. 初始化或克隆仓库 #\r初始化新仓库：在一个空文件夹中启动一个新的 Git 仓库。\ncd my-project # 进入你的项目目录 git init # 初始化一个空的Git仓库 克隆远程仓库：从远程服务器（如 GitHub）复制一个现有仓库到本地。\ngit clone [远程仓库URL] # 示例: git clone https://github.com/username/repo-name.git 3. 查看仓库状态 #\rgit status：显示工作区和暂存区的状态，告诉你哪些文件已修改、哪些已暂存、哪些未被跟踪等。\ngit status 4. 添加文件到暂存区 #\rgit add [文件名]：将指定文件添加到暂存区。\ngit add index.html git add .：将所有修改过（包括新增、修改、删除）的文件添加到暂存区。\ngit add . 5. 提交修改 #\rgit commit -m \u0026quot;提交信息\u0026quot;：将暂存区的内容提交到本地仓库，并附带一条简明的提交信息。\ngit commit -m \u0026#34;Add initial homepage content\u0026#34; 6. 查看提交历史 #\rgit log：显示所有提交历史，包括提交哈希、作者、日期和提交信息。\ngit log git log --oneline：以简洁的一行显示提交历史。\ngit log --oneline 7. 分支管理 #\rgit branch：列出所有本地分支。\ngit branch git branch [分支名]：创建新分支。\ngit branch feature-x git checkout [分支名]：切换到指定分支。\ngit checkout feature-x git checkout -b [新分支名]：创建并立即切换到新分支（相当于 git branch [新分支名] 和 git checkout [新分支名] 的组合）。\ngit checkout -b new-feature git merge [源分支名]：将源分支的修改合并到当前分支。\ngit checkout main # 切换到主分支 git merge feature-x # 将 feature-x 分支的修改合并到 main git branch -d [分支名]：删除指定分支（只有在合并后才能删除）。\ngit branch -d feature-x 8. 远程仓库操作 #\rgit remote -v：查看已配置的远程仓库。\ngit remote -v git push [远程仓库名] [本地分支名]：将本地的提交推送到远程仓库。\ngit push origin main # 将本地的 main 分支推送到名为 origin 的远程仓库 git pull [远程仓库名] [远程分支名]：从远程仓库拉取最新的修改并合并到当前本地分支。\ngit pull origin main # 从名为 origin 的远程仓库拉取 main 分支的修改 9. 撤销操作 #\rGit 提供了多种撤销方式，但使用时需要谨慎，特别是涉及已推送到远程的提交。\ngit reset [文件名]：将文件从暂存区移回工作区（取消暂存）。\ngit reset index.html git reset --hard HEAD：危险操作！ 彻底丢弃所有未提交的修改，将工作区和暂存区回退到最近一次提交的状态。谨慎使用，因为它会丢失你的工作。\ngit reset --hard HEAD git revert [提交哈希]：创建一个新的提交来撤销指定提交的更改。这是一种更安全的撤销方式，因为它不会改写历史，适合在共享分支上使用。\ngit revert abc1234 # 撤销哈希为 abc1234 的提交 .gitignore 文件 #\r在你的项目根目录下创建一个名为 .gitignore 的文件，可以在其中指定 Git 应该忽略的文件或目录，避免将它们添加到版本控制中。这对于编译生成的文件、日志文件、敏感配置等非常有用。\n示例 .gitignore 文件：\n# 忽略所有 .log 文件\r*.log\r# 忽略 node_modules 目录\rnode_modules/\r# 忽略特定文件\r.env Git 工作流建议 #\r特性分支工作流 (Feature Branch Workflow)： main (或 master) 分支保持稳定。 为每个新功能或 bug 修复创建一个新的特性分支。 在特性分支上开发和提交。 完成后，将特性分支合并回 main 分支。 合并后删除特性分支。 提交频率： 经常提交，每次提交只包含一个逻辑上的完整修改。 提交信息要清晰、有意义，描述本次提交做了什么。 拉取更新： 在开始工作前和推送前，习惯性地 git pull 以获取最新代码，避免冲突。 ","date":"September 17, 2025","externalUrl":null,"permalink":"/posts/git-%E7%9A%84%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/","section":"博客","summary":"","title":"Git 的核心概念","type":"posts"},{"content":"\r🎬 免费影视网站搭建教程 - MoonTV 开源项目 #\r在这个数字化时代，搭建一个属于自己的影视聚合网站已经变得非常简单。今天我将为大家介绍一个优秀的开源项目 MoonTV，它是一个功能强大、开箱即用的跨平台影视聚合播放器。\n🌟 项目简介 #\rMoonTV 是一个基于 Next.js 14 + Tailwind CSS + TypeScript 构建的现代化影视聚合平台，支持多资源搜索、在线播放、收藏同步、播放记录等功能，让你可以随时随地畅享海量免费影视内容。\n✨ 核心功能特性 #\r🔍 多源聚合搜索 #\r内置数十个免费资源站点 一次搜索立刻返回全源结果 智能筛选优质资源 📱 现代化用户体验 #\rPWA 支持：离线缓存、安装到桌面/主屏 响应式布局：桌面侧边栏 + 移动底部导航 流畅播放：集成 HLS.js \u0026amp; ArtPlayer 智能去广告：自动跳过视频中的切片广告（实验性） 💾 数据存储与同步 #\r收藏功能：支持 Redis/D1 存储 继续观看：多端同步播放进度 本地存储：支持 localStorage 本地存储 📄 丰富的内容展示 #\r剧集列表、演员信息 年份、评分、简介等完整信息 高清海报和缩略图 🚀 部署方案 #\r本项目支持多种部署方式，满足不同用户的需求：\n1. Vercel 部署（推荐） #\r优势：零运维成本，免费额度足够个人使用，自动SSL证书\n部署步骤：\nFork 项目：前往 GitHub Fork 项目到你的账户 Vercel 部署： 登录 Vercel 点击 Add New → Project 选择 Fork 后的仓库 环境配置： 设置 PASSWORD 环境变量（强烈建议） 保持默认设置完成首次部署 自定义配置： 修改 Fork 后仓库中的 config.json 文件 每次 Push 到 main 分支自动重新构建 2. Cloudflare Pages 部署 #\r优势：全球CDN加速，免费额度大，D1数据库支持\n基础部署：\n# 构建命令 pnpm install --frozen-lockfile \u0026amp;\u0026amp; pnpm run pages:build D1 数据库支持：\n创建 D1 SQL 数据库 初始化数据库结构 绑定数据库到 Pages 项目 设置环境变量：NEXT_PUBLIC_STORAGE_TYPE=d1 3. Docker 部署 #\r适用场景：自建服务器、NAS、群晖等本地部署\n快速启动：\n# 拉取镜像 docker pull ghcr.io/senshinya/moontv:latest # 运行容器 docker run -d --name moontv -p 3000:3000 ghcr.io/senshinya/moontv:latest 访问地址： http://服务器IP:3000\n🛠️ 技术栈 #\r前端框架：Next.js 14 样式方案：Tailwind CSS 开发语言：TypeScript 播放器：HLS.js + ArtPlayer 数据库：Redis / Cloudflare D1 部署平台：Vercel / Cloudflare Pages / Docker 📊 性能优势 #\r快速响应：基于 Next.js 14 的服务端渲染 全球加速：支持 CDN 部署 离线访问：PWA 技术支持 资源优化：智能缓存和预加载 🔧 进阶配置 #\r自定义资源站点 #\r通过修改 config.json 文件，可以添加更多资源站点：\n{ \u0026#34;sites\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;站点名称\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;API地址\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;资源类型\u0026#34; } ] } 用户权限管理 #\r设置 USERNAME 和 PASSWORD 作为管理员账号 支持用户注册和登录系统 个人收藏和观看记录管理 🎯 适用场景 #\r个人影视库：搭建私人影视收藏平台 家庭娱乐：为家庭成员提供观影服务 小团队共享：团队内部影视资源分享 学习交流：技术学习和开源项目研究 🚨 注意事项 #\r合法使用：请确保遵守当地法律法规 资源版权：尊重版权，仅用于学习和个人使用 服务器配置：确保服务器有足够的带宽和存储空间 安全防护：设置强密码，定期更新系统 📈 未来发展 #\r支持更多视频格式 增强用户交互功能 优化移动端体验 添加更多个性化设置 🤝 开源贡献 #\rMoonTV 是一个活跃的开源项目，欢迎大家参与贡献：\nGitHub 地址：https://github.com/senshinya/MoonTV 问题反馈：提交 Issues 功能建议：参与 Discussions 代码贡献：提交 Pull Requests 通过这个教程，相信你已经可以成功搭建属于自己的影视聚合网站了。如果在搭建过程中遇到任何问题，欢迎在评论区留言交流！\n💡 小贴士：推荐使用 Vercel 部署，简单快捷且完全免费！\n","date":"September 17, 2025","externalUrl":null,"permalink":"/posts/%E5%BD%B1%E8%A7%86%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/","section":"博客","summary":"","title":"免费影视网站搭建教程 - MoonTV 开源项目","type":"posts"},{"content":"","date":"October 6, 2025","externalUrl":null,"permalink":"/","section":"Aliom","summary":"","title":"Aliom","type":"page"},{"content":"","date":"October 6, 2025","externalUrl":null,"permalink":"/tags/docker/","section":"Tags","summary":"","title":"Docker","type":"tags"},{"content":"","date":"October 6, 2025","externalUrl":null,"permalink":"/tags/git/","section":"Tags","summary":"","title":"Git","type":"tags"},{"content":"","date":"October 6, 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"October 6, 2025","externalUrl":null,"permalink":"/categories/%E7%AC%94%E8%AE%B0/","section":"分类","summary":"","title":"笔记","type":"categories"},{"content":"","date":"October 6, 2025","externalUrl":null,"permalink":"/posts/","section":"博客","summary":"","title":"博客","type":"posts"},{"content":"","date":"October 6, 2025","externalUrl":null,"permalink":"/categories/","section":"分类","summary":"","title":"分类","type":"categories"},{"content":"","date":"October 6, 2025","externalUrl":null,"permalink":"/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/","section":"Tags","summary":"","title":"命令行","type":"tags"},{"content":"","date":"September 17, 2025","externalUrl":null,"permalink":"/categories/ai%E6%96%87/","section":"分类","summary":"","title":"Ai文","type":"categories"},{"content":"","date":"September 17, 2025","externalUrl":null,"permalink":"/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/","section":"Tags","summary":"","title":"版本控制","type":"tags"},{"content":"","date":"September 17, 2025","externalUrl":null,"permalink":"/tags/%E6%8A%80%E6%9C%AF/","section":"Tags","summary":"","title":"技术","type":"tags"},{"content":"","date":"September 17, 2025","externalUrl":null,"permalink":"/tags/%E5%BB%BA%E7%AB%99/","section":"Tags","summary":"","title":"建站","type":"tags"},{"content":"","date":"September 17, 2025","externalUrl":null,"permalink":"/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/","section":"Tags","summary":"","title":"开发工具","type":"tags"},{"content":"","date":"September 17, 2025","externalUrl":null,"permalink":"/tags/%E5%BC%80%E6%BA%90/","section":"Tags","summary":"","title":"开源","type":"tags"},{"content":"","date":"September 17, 2025","externalUrl":null,"permalink":"/tags/%E5%BD%B1%E8%A7%86/","section":"Tags","summary":"","title":"影视","type":"tags"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/pinned/","section":"Pinned","summary":"","title":"Pinned","type":"pinned"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]